{"version":3,"sources":["containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["App","score","flames","offset","length","_this","this","_this$props","props","onName1Change","onName2Change","name_1","name_2","name_1_score","name_2_score","total_score","react_default","a","createElement","className","type","onChange","onClick","name1Array","split","name2Array","name1Filtered","filter","letter","includes","name2Filtered","console","log","onLightFire","scoreToText","Component","connect","state","dispatch","event","payload","target","value","scores","computeScores","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","undefined","action","Object","assign","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.078ebcd3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { setName1, setName2, computeScores } from '../actions';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => {\n\n  return {\n    name_1: state.name_1,\n    name_2: state.name_2,\n    name_1_score: state.name_1_score,\n    name_2_score: state.name_2_score,\n    total_score: state.total_score,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  \n  return {\n    onName1Change: (event) => dispatch(setName1(event.target.value)),\n    onName2Change: (event) => dispatch(setName2(event.target.value)),\n    onLightFire: (scores) => dispatch(computeScores(scores)),\n  }\n}\n\nclass App extends Component {\n\n  scoreToText(score) {\n\n    const flames = [\"FRIENDSHIP\",\"LOVE\",\"AFFECTION\",\"MARRIAGE\",\"ENEMIES\",\"SWEETHEART\"];\n    let offset = score % flames.length;\n\n    return offset == 0 ? flames[flames.length - 1] : flames[offset - 1];\n  }\n\n  render() {\n\n    const {\n      onName1Change,\n      onName2Change,\n      name_1,\n      name_2,\n      name_1_score,\n      name_2_score,\n      total_score,\n    } = this.props;\n\n    return (\n      <div className=\"flames-container\">\n        <h1>FLAMES</h1>\n        <div className=\"flames-yourname flames-input\">\n          <label>Your Name </label><input type='text' onChange={onName1Change} />\n        </div>\n        <div className=\"flames-crushname flames-input\">\n          <label>Your Crush </label><input type='text' onChange={onName2Change} />\n        </div>\n        <div className=\"flames-button\">\n          <button onClick={() => {\n\n            // convert string to array\n            const name1Array = name_1.split('');\n            const name2Array = name_2.split('');\n\n            // remove same letters\n            const name1Filtered = name1Array.filter(function(letter) {\n\n              return !name2Array.includes(letter);\n            })\n            const name2Filtered = name2Array.filter(function(letter) {\n\n              return !name1Array.includes(letter);\n            })\n\n            console.log('LENGTH = ', name1Filtered.length);\n\n            // get score\n            this.props.onLightFire({\n              name_1_score: name1Filtered.length,\n              name_2_score: name2Filtered.length,\n              total_score: name1Filtered.length + name2Filtered.length,\n            });            \n          }}>Predict Future</button>\n        </div>\n        <div className=\"flames-result\">\n          <label className='yours'>You towards your crush:<br/>{this.scoreToText(name_1_score)}</label>\n          <label className='crush'>Your crush towards you:<br/>{this.scoreToText(name_2_score)}</label>\n          <label className='together'>Future Together: {this.scoreToText(total_score)}</label>\n          <div className='again'><button>Try Again!</button></div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_NAME_1, CHANGE_NAME_2, COMPUTE_SCORES } from './constants';\r\n\r\nexport const setName1 = (text) => ({\r\n\ttype: CHANGE_NAME_1,\r\n\tpayload: text\r\n})\r\n\r\nexport const setName2 = (text) => ({\r\n\ttype: CHANGE_NAME_2,\r\n\tpayload: text\r\n})\r\n\r\nexport const computeScores = (scores) => ({\r\n\ttype: COMPUTE_SCORES,\r\n\tpayload: scores\r\n})","export const CHANGE_NAME_1 = \"CHANGE_NAME_1\";\r\nexport const CHANGE_NAME_2 = \"CHANGE_NAME_2\";\r\nexport const COMPUTE_SCORES = \"COMPUTE_SCORES\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_NAME_1, CHANGE_NAME_2, COMPUTE_SCORES } from './constants';\r\n\r\nconst initialState = {\r\n\tname_1: '',\r\n\tname_2: '',\r\n\tname_1_score: 0,\r\n\tname_2_score: 0,\r\n\ttotal_score: 0,\r\n}\r\n\r\nexport const flameOn = (state = initialState, action = {}) => {\r\n\r\n\tconsole.log('ACTION == ', action.payload);\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_NAME_1:\r\n\t\t\treturn Object.assign({}, state, { name_1: action.payload });\r\n\t\tcase CHANGE_NAME_2:\r\n\t\t\treturn Object.assign({}, state, { name_2: action.payload });\r\n\t\tcase COMPUTE_SCORES:\r\n\t\t\tconsole.log(state);\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tname_1_score: action.payload.name_1_score,\r\n\t\t\t\tname_2_score: action.payload.name_2_score,\r\n\t\t\t\ttotal_score: action.payload.total_score,\r\n\t\t\t});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { flameOn } from './reducers';\n\nconst store = createStore(flameOn);\n\nReactDOM.render(<Provider store={store}>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}